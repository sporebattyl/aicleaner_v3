name: Maintenance & Monitoring

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
    - cron: '0 14 * * *'  # Daily at 2 PM UTC for monitoring
  workflow_dispatch:  # Manual trigger
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'dependency-updates'
          - 'security-audit'
          - 'performance-check'
          - 'cleanup'

jobs:
  dependency-updates:
    runs-on: ubuntu-latest
    name: Dependency Updates
    if: github.event.schedule == '0 2 * * 1' || github.event.inputs.task == 'all' || github.event.inputs.task == 'dependency-updates'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check for dependency updates
        run: |
          cd addons/aicleaner_v3
          
          # Create requirements.in if it doesn't exist
          if [ ! -f "requirements.in" ]; then
            cp requirements.txt requirements.in
          fi
          
          # Check for updates
          pip-compile --upgrade requirements.in
          
          # Check if there are updates
          if ! git diff --quiet requirements.txt; then
            echo "updates_available=true" >> $GITHUB_ENV
            echo "📦 Dependency updates available"
            git diff requirements.txt
          else
            echo "updates_available=false" >> $GITHUB_ENV
            echo "✅ All dependencies are up to date"
          fi

      - name: Create dependency update PR
        if: env.updates_available == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: Update Python dependencies'
          title: '🔄 Automated Dependency Updates'
          body: |
            ## 📦 Dependency Updates
            
            This PR contains automated dependency updates generated by the maintenance workflow.
            
            ### Changes
            - Updated Python package dependencies to latest compatible versions
            - All updates maintain compatibility with current Python version constraints
            
            ### Validation Required
            - [ ] Review dependency changes
            - [ ] Verify no breaking changes in updated packages
            - [ ] Ensure addon functionality is not affected
            - [ ] Run full test suite
            
            ### Auto-generated
            This PR was automatically created by the maintenance workflow.
          branch: automated/dependency-updates
          delete-branch: true

  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    if: github.event.schedule == '0 2 * * 1' || github.event.inputs.task == 'all' || github.event.inputs.task == 'security-audit'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run Safety check
        run: |
          cd addons/aicleaner_v3
          echo "🔍 Running Safety vulnerability check..."
          safety check --json --output safety-report.json || true
          
          if [ -f "safety-report.json" ]; then
            VULNS=$(jq '.report.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "Found $VULNS vulnerabilities"
            
            if [ "$VULNS" -gt "0" ]; then
              echo "⚠️  Security vulnerabilities detected!"
              jq '.report.vulnerabilities[] | {package: .package_name, vulnerability: .vulnerability_id, severity: .severity}' safety-report.json
            else
              echo "✅ No known vulnerabilities found"
            fi
          fi

      - name: Run Bandit security linter
        run: |
          cd addons/aicleaner_v3
          echo "🔍 Running Bandit security analysis..."
          bandit -r . -f json -o bandit-report.json -ll || true
          
          if [ -f "bandit-report.json" ]; then
            HIGH_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH") | length' bandit-report.json 2>/dev/null || echo "0")
            MEDIUM_ISSUES=$(jq '.results[] | select(.issue_severity == "MEDIUM") | length' bandit-report.json 2>/dev/null || echo "0")
            
            echo "Found $HIGH_ISSUES high severity and $MEDIUM_ISSUES medium severity issues"
            
            if [ "$HIGH_ISSUES" -gt "0" ]; then
              echo "⚠️  High severity security issues detected!"
              jq '.results[] | select(.issue_severity == "HIGH") | {file: .filename, issue: .issue_text, line: .line_number}' bandit-report.json
            fi
          fi

      - name: Run Semgrep analysis
        run: |
          cd addons/aicleaner_v3
          echo "🔍 Running Semgrep static analysis..."
          semgrep --config=auto --json --output=semgrep-report.json . || true
          
          if [ -f "semgrep-report.json" ]; then
            FINDINGS=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo "0")
            echo "Found $FINDINGS potential security issues"
            
            if [ "$FINDINGS" -gt "0" ]; then
              echo "⚠️  Security findings detected!"
              jq '.results[] | {file: .path, rule: .check_id, severity: .extra.severity}' semgrep-report.json
            else
              echo "✅ No security issues found"
            fi
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-reports
          path: |
            addons/aicleaner_v3/safety-report.json
            addons/aicleaner_v3/bandit-report.json
            addons/aicleaner_v3/semgrep-report.json
          retention-days: 30

  performance-check:
    runs-on: ubuntu-latest
    name: Performance Monitoring
    if: github.event.schedule == '0 14 * * *' || github.event.inputs.task == 'all' || github.event.inputs.task == 'performance-check'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd addons/aicleaner_v3
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install psutil memory-profiler

      - name: Performance baseline check
        run: |
          cd addons/aicleaner_v3
          echo "📊 Running performance baseline checks..."
          
          python -c "
import time
import psutil
import os
import sys

def measure_startup_time():
    start_time = time.time()
    # Simulate addon initialization
    import json
    import yaml
    try:
        if os.path.exists('config.yaml'):
            with open('config.yaml') as f:
                config = yaml.safe_load(f)
    except:
        pass
    end_time = time.time()
    return end_time - start_time

def measure_memory_usage():
    process = psutil.Process(os.getpid())
    return process.memory_info().rss / 1024 / 1024  # MB

def measure_cpu_usage():
    return psutil.cpu_percent(interval=1)

# Run measurements
startup_time = measure_startup_time()
memory_usage = measure_memory_usage()
cpu_usage = measure_cpu_usage()

print(f'Startup time: {startup_time:.3f}s')
print(f'Memory usage: {memory_usage:.1f}MB')
print(f'CPU usage: {cpu_usage:.1f}%')

# Performance thresholds
issues = []
if startup_time > 5.0:
    issues.append(f'Startup time ({startup_time:.3f}s) exceeds 5s threshold')
if memory_usage > 150:
    issues.append(f'Memory usage ({memory_usage:.1f}MB) exceeds 150MB threshold')
if cpu_usage > 80:
    issues.append(f'CPU usage ({cpu_usage:.1f}%) exceeds 80% threshold')

if issues:
    print('⚠️  Performance issues detected:')
    for issue in issues:
        print(f'  - {issue}')
    sys.exit(1)
else:
    print('✅ Performance metrics within acceptable ranges')
"

      - name: Docker image size check
        run: |
          cd addons/aicleaner_v3
          echo "📦 Checking Docker image size..."
          
          # Build a test image
          docker build -t aicleaner-test:latest .
          
          # Get image size
          IMAGE_SIZE=$(docker images aicleaner-test:latest --format "table {{.Size}}" | tail -n 1)
          echo "Image size: $IMAGE_SIZE"
          
          # Clean up
          docker rmi aicleaner-test:latest

  cleanup:
    runs-on: ubuntu-latest
    name: Repository Cleanup
    if: github.event.schedule == '0 2 * * 1' || github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean up temporary files
        run: |
          echo "🧹 Cleaning up temporary files..."
          
          # Remove Python cache files
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true
          find . -type f -name "*.pyo" -delete 2>/dev/null || true
          
          # Remove test artifacts
          rm -rf .pytest_cache/ 2>/dev/null || true
          rm -rf .coverage 2>/dev/null || true
          rm -rf htmlcov/ 2>/dev/null || true
          
          # Remove editor backup files
          find . -type f -name "*~" -delete 2>/dev/null || true
          find . -type f -name "*.bak" -delete 2>/dev/null || true
          
          echo "✅ Cleanup completed"

      - name: Check for large files
        run: |
          echo "📏 Checking for large files..."
          
          # Find files larger than 1MB
          LARGE_FILES=$(find . -type f -size +1M -not -path "./.git/*" 2>/dev/null || true)
          
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️  Large files detected:"
            echo "$LARGE_FILES" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  - $file ($size)"
            done
          else
            echo "✅ No large files found"
          fi

      - name: Check repository health
        run: |
          echo "🏥 Repository health check..."
          
          # Check for broken symlinks
          BROKEN_LINKS=$(find . -type l ! -exec test -e {} \; -print 2>/dev/null || true)
          if [ -n "$BROKEN_LINKS" ]; then
            echo "⚠️  Broken symlinks found:"
            echo "$BROKEN_LINKS"
          fi
          
          # Check for empty directories
          EMPTY_DIRS=$(find . -type d -empty -not -path "./.git/*" 2>/dev/null || true)
          if [ -n "$EMPTY_DIRS" ]; then
            echo "📁 Empty directories found:"
            echo "$EMPTY_DIRS"
          fi
          
          echo "✅ Repository health check completed"

  monitoring-summary:
    runs-on: ubuntu-latest
    name: Generate Monitoring Summary
    needs: [dependency-updates, security-audit, performance-check, cleanup]
    if: always()
    steps:
      - name: Create monitoring summary
        run: |
          echo "## 🔍 Maintenance & Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Updates**: ${{ needs.dependency-updates.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.security-audit.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Check**: ${{ needs.performance-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cleanup**: ${{ needs.cleanup.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall health status
          if [ "${{ needs.security-audit.result }}" = "success" ] && [ "${{ needs.performance-check.result }}" = "success" ]; then
            echo "### 🟢 Overall Status: Healthy" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-audit.result }}" = "failure" ] || [ "${{ needs.performance-check.result }}" = "failure" ]; then
            echo "### 🔴 Overall Status: Issues Detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🟡 Overall Status: Monitoring" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Next Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Review any security findings" >> $GITHUB_STEP_SUMMARY
          echo "- Check performance metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Review dependency update PRs" >> $GITHUB_STEP_SUMMARY