name: Release Management

on:
  push:
    tags:
      - 'v*'
  release:
    types:
      - created
      - published

env:
  REGISTRY: ghcr.io

jobs:
  validate-release:
    runs-on: ubuntu-latest
    name: Validate release
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version information
        id: version
        run: |
          # Extract version from tag or release
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.release.tag_name }}
            VERSION=${VERSION#v}
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "${VERSION}" =~ (alpha|beta|rc) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Detected version: ${VERSION}"
          echo "Is prerelease: ${{ steps.version.outputs.prerelease }}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Validate semantic version format
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: ${VERSION}"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          
          echo "✓ Version format is valid: ${VERSION}"

      - name: Check addon config version
        run: |
          cd addons/aicleaner_v3
          CONFIG_VERSION=$(python -c "import yaml; print(yaml.safe_load(open('config.yaml'))['version'])")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "${CONFIG_VERSION}" != "${RELEASE_VERSION}" ]; then
            echo "❌ Version mismatch:"
            echo "  config.yaml: ${CONFIG_VERSION}"
            echo "  Release tag: ${RELEASE_VERSION}"
            exit 1
          fi
          
          echo "✓ Version consistency validated"

  create-release-notes:
    runs-on: ubuntu-latest
    name: Generate release notes
    needs: validate-release
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          echo "## 🚀 AICleaner V3 ${VERSION}" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "${PREVIOUS_TAG}" ]; then
            echo "### 📋 Changes since ${PREVIOUS_TAG}" >> release_notes.md
            echo "" >> release_notes.md
            
            # Generate changelog from commit messages
            git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | \
              grep -E "(feat|fix|docs|style|refactor|test|chore):" >> release_notes.md || true
          else
            echo "### 📋 Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "- Initial release of AICleaner V3 Home Assistant addon" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 🏗️ Build Information" >> release_notes.md
          echo "- **Version**: ${VERSION}" >> release_notes.md
          echo "- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- **Commit**: ${GITHUB_SHA:0:8}" >> release_notes.md
          echo "- **Supported Architectures**: amd64, arm64, armv7" >> release_notes.md
          
          if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "true" ]; then
            echo "" >> release_notes.md
            echo "### ⚠️ Prerelease Notice" >> release_notes.md
            echo "This is a prerelease version intended for testing. Use with caution in production environments." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 📦 Installation" >> release_notes.md
          echo "\`\`\`yaml" >> release_notes.md
          echo "# Add to Home Assistant addon repository:" >> release_notes.md
          echo "https://github.com/${{ github.repository }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          
          # Set output for other jobs
          {
            echo 'release_notes<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release_notes.md

  security-scan-release:
    runs-on: ubuntu-latest
    name: Security scan for release
    needs: validate-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run comprehensive security scan
        run: |
          echo "🔒 Running security scan for release v${{ needs.validate-release.outputs.version }}"
          
          # Use Trivy to scan the repository
          docker run --rm -v $(pwd):/workspace \
            aquasec/trivy fs --exit-code 1 --severity CRITICAL,HIGH /workspace
          
          echo "✓ Security scan passed"

  update-documentation:
    runs-on: ubuntu-latest
    name: Update release documentation
    needs: [validate-release, create-release-notes]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update README with latest version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Update version badges in README
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${VERSION}/g" README.md
          
          # Update installation instructions if needed
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${VERSION}/g" README.md
          
          echo "✓ Documentation updated for version ${VERSION}"

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add README.md
            git commit -m "docs: Update documentation for release v${{ needs.validate-release.outputs.version }}"
            git push origin HEAD:main
            echo "✓ Documentation updates committed"
          fi

  publish-github-release:
    runs-on: ubuntu-latest
    name: Publish GitHub release
    needs: [validate-release, create-release-notes, security-scan-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create release package
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Create addon package
          cd addons/aicleaner_v3
          tar -czf "../../aicleaner_v3-${VERSION}.tar.gz" \
            --exclude='.git*' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='tests/' \
            .
          
          cd ..
          
          # Generate checksums
          sha256sum "aicleaner_v3-${VERSION}.tar.gz" > "aicleaner_v3-${VERSION}.checksums.txt"
          
          # Create installation script
          cat > "install-aicleaner_v3-${VERSION}.sh" << 'EOF'
#!/bin/bash
echo "Installing AICleaner V3 ${VERSION}..."
echo "Add this repository to your Home Assistant add-on store:"
echo "https://github.com/${{ github.repository }}"
EOF
          chmod +x "install-aicleaner_v3-${VERSION}.sh"

      - name: Create GitHub Release with Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: AICleaner V3 v${{ needs.validate-release.outputs.version }}
          body: ${{ needs.create-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            aicleaner_v3-${{ needs.validate-release.outputs.version }}.tar.gz
            aicleaner_v3-${{ needs.validate-release.outputs.version }}.checksums.txt
            install-aicleaner_v3-${{ needs.validate-release.outputs.version }}.sh

  notify-release:
    runs-on: ubuntu-latest
    name: Release notifications
    needs: [validate-release, publish-github-release]
    if: always() && (needs.publish-github-release.result == 'success' || needs.publish-github-release.result == 'skipped')
    steps:
      - name: Release summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          echo "## 🎉 Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $([ "$IS_PRERELEASE" = "true" ] && echo "Prerelease" || echo "Stable Release")" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: https://github.com/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Add repository to Home Assistant" >> $GITHUB_STEP_SUMMARY
          echo "2. Install AICleaner V3 addon" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure addon settings" >> $GITHUB_STEP_SUMMARY