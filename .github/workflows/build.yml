name: Build Home Assistant Addon

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io

jobs:
  info:
    runs-on: ubuntu-latest
    name: Get addon information
    outputs:
      architectures: ${{ steps.info.outputs.architectures }}
      name: ${{ steps.info.outputs.name }}
      slug: ${{ steps.info.outputs.slug }}
      version: ${{ steps.info.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get addon info
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: ./aicleaner_v3

  validate-build:
    runs-on: ubuntu-latest
    name: Validate build configuration
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Dockerfile
        run: |
          cd aicleaner_v3
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile not found"
            exit 1
          fi
          
          # Check for security best practices
          if grep -q "USER root" Dockerfile; then
            echo "⚠️  Warning: Running as root user detected"
          fi
          
          # Validate Dockerfile syntax
          docker run --rm -i hadolint/hadolint < Dockerfile || true
          echo "✓ Dockerfile validation completed"

      - name: Validate build requirements
        run: |
          cd aicleaner_v3
          
          # Check for requirements.txt
          if [ ! -f "requirements.txt" ]; then
            echo "⚠️  requirements.txt not found"
          fi
          
          # Check for run script
          if [ ! -f "run.sh" ]; then
            echo "⚠️  run.sh not found"
          fi
          
          echo "✓ Build requirements validation completed"

  build:
    runs-on: ubuntu-latest
    name: Build ${{ matrix.arch }} addon
    needs: [info, validate-build]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJson(needs.info.outputs.architectures) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.arch }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ needs.info.outputs.slug }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.arch }}-
            ${{ runner.os }}-buildx-

      - name: Build addon
        uses: home-assistant/builder@master
        with:
          args: |
            --target ./aicleaner_v3 \
            --${{ matrix.arch }} \
            --docker-hub ${{ env.REGISTRY }} \
            --image "${{ needs.info.outputs.slug }}" \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache-new,mode=max"

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-build:
    runs-on: ubuntu-latest
    name: Test built images
    needs: [info, build]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        arch: [amd64]  # Test primary architecture only for PRs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          cd aicleaner_v3
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --load \
            --tag test-aicleaner:latest \
            .

      - name: Test image startup
        run: |
          # Test basic container functionality
          timeout 30 docker run --rm --name test-container \
            -e LOG_LEVEL=debug \
            test-aicleaner:latest || true
          
          echo "✓ Container startup test completed"

      - name: Test image security
        run: |
          # Check for common security issues
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/workspace \
            aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
            test-aicleaner:latest

  publish:
    runs-on: ubuntu-latest
    name: Publish addon
    needs: [info, build]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectures**: ${{ needs.info.outputs.architectures }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub release assets
        if: github.event_name == 'release'
        run: |
          cd aicleaner_v3
          
          # Create release package
          tar -czf "../aicleaner_v3-${{ needs.info.outputs.version }}.tar.gz" \
            --exclude='.git*' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            .
          
          # Generate checksums
          cd ..
          sha256sum "aicleaner_v3-${{ needs.info.outputs.version }}.tar.gz" > checksums.txt
          
          echo "✓ Release assets created"

  post-build:
    runs-on: ubuntu-latest
    name: Post-build cleanup and notifications
    needs: [info, build, publish]
    if: always()
    steps:
      - name: Build status summary
        run: |
          echo "## Build Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Info Job**: ${{ needs.info.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Job**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish Job**: ${{ needs.publish.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ **Build completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build failed or was cancelled**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup cache on failure
        if: failure()
        run: |
          # Clean up Docker buildx cache on failure to prevent corruption
          docker buildx prune -f || true
          echo "✓ Cache cleanup completed"