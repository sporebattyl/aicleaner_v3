var t=Object.defineProperty,e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,o=(e,n,s)=>n in e?t(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,r=(t,r)=>{for(var i in r||(r={}))n.call(r,i)&&o(t,i,r[i]);if(e)for(var i of e(r))s.call(r,i)&&o(t,i,r[i]);return t},i=(t,e,n)=>new Promise((s,o)=>{var r=t=>{try{c(n.next(t))}catch(e){o(e)}},i=t=>{try{c(n.throw(t))}catch(e){o(e)}},c=t=>t.done?s(t.value):Promise.resolve(t.value).then(r,i);c((n=n.apply(t,e)).next())});const c=new class{constructor(){this.baseURL=window.location.origin}request(t){return i(this,arguments,function*(t,e={}){const n=`${this.baseURL}/api${t}`,s=r({headers:r({"Content-Type":"application/json"},e.headers)},e);try{const t=yield fetch(n,s);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=t.headers.get("content-type");return e&&e.includes("application/json")?yield t.json():yield t.text()}catch(o){throw o}})}getConfiguration(){return i(this,null,function*(){return this.request("/config")})}updateConfiguration(t){return i(this,null,function*(){return this.request("/config",{method:"POST",body:JSON.stringify(t)})})}getDevices(){return i(this,null,function*(){return this.request("/devices")})}controlDevice(t,e){return i(this,null,function*(){return this.request(`/devices/${t}/control`,{method:"POST",body:JSON.stringify(e)})})}getZones(){return i(this,null,function*(){return this.request("/zones")})}createZone(t){return i(this,null,function*(){return this.request("/zones",{method:"POST",body:JSON.stringify(t)})})}updateZone(t,e){return i(this,null,function*(){return this.request(`/zones/${t}`,{method:"PUT",body:JSON.stringify(e)})})}deleteZone(t){return i(this,null,function*(){return this.request(`/zones/${t}`,{method:"DELETE"})})}toggleZone(t,e){return i(this,null,function*(){return this.request(`/zones/${t}/toggle`,{method:"POST",body:JSON.stringify({active:e})})})}getMetrics(){return i(this,null,function*(){return this.request("/metrics")})}getHealth(){return i(this,null,function*(){return this.request("/health")})}};const h=new class{constructor(){this.socket=null,this.connected=!1,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.messageHandlers=[],this.statusHandlers=[]}connect(t){t&&this.messageHandlers.push(t);const e=`${"https:"===window.location.protocol?"wss:":"ws:"}//${window.location.host}/ws`;try{this.socket=new WebSocket(e),this.socket.onopen=()=>{this.connected=!0,this.reconnectAttempts=0,this.notifyStatusChange("connected")},this.socket.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){}},this.socket.onclose=()=>{this.connected=!1,this.notifyStatusChange("disconnected"),this.attemptReconnect()},this.socket.onerror=t=>{this.notifyStatusChange("error")}}catch(n){this.notifyStatusChange("error")}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.messageHandlers=[],this.statusHandlers=[]}attemptReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const t=1e3*Math.pow(2,this.reconnectAttempts);setTimeout(()=>{this.connected||this.connect()},t)}else this.notifyStatusChange("failed")}onStatusChange(t){this.statusHandlers.push(t)}notifyStatusChange(t){this.statusHandlers.forEach(e=>e(t))}send(t){this.socket&&this.connected&&this.socket.send(JSON.stringify(t))}};export{c as A,h as W};
