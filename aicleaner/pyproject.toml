[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aicleaner"
version = "3.0.0"
description = "Advanced AI-powered content analysis and management system for automated photo organization"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AICleaner Team", email = "support@aicleaner.dev"}
]
maintainers = [
    {name = "AICleaner Team", email = "support@aicleaner.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics",
    "Topic :: System :: Archiving",
    "Framework :: AsyncIO",
]
keywords = [
    "ai", 
    "image-processing", 
    "automation", 
    "photo-management", 
    "computer-vision",
    "home-assistant",
    "gemini",
    "machine-learning"
]
requires-python = ">=3.10"
dependencies = [
    "pydantic>=2.0.0,<3.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "PyYAML>=6.0,<7.0.0",
    "asyncio-mqtt>=0.16.0,<1.0.0",
    "httpx>=0.25.0,<1.0.0",
    "paho-mqtt>=2.0.0,<3.0.0",
    "opencv-python>=4.8.0,<5.0.0",
    "Pillow>=10.0.0,<11.0.0",
    "numpy>=1.24.0,<2.0.0",
    "psutil>=5.9.0,<6.0.0",
    "google-generativeai>=0.5.0,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "structlog>=23.2.0,<24.0.0",
]

[project.urls]
Homepage = "https://github.com/aicleaner/aicleaner"
Documentation = "https://docs.aicleaner.dev"
Repository = "https://github.com/aicleaner/aicleaner.git"
"Bug Tracker" = "https://github.com/aicleaner/aicleaner/issues"
Changelog = "https://github.com/aicleaner/aicleaner/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "black>=23.0.0,<24.0.0",
    "mypy>=1.5.0,<2.0.0",
    "flake8>=6.0.0,<7.0.0",
    "pre-commit>=3.5.0,<4.0.0",
]
enhanced = [
    "requests>=2.31.0,<3.0.0",
    "tenacity>=8.2.0,<9.0.0",
    "cryptography>=41.0.0,<42.0.0",
]

[project.scripts]
aicleaner = "aicleaner.src.main:main"
aicleaner-health = "aicleaner.src.core.health:main"

[project.entry-points."home_assistant.components"]
aicleaner = "aicleaner.src"

[tool.setuptools.packages.find]
where = ["src"]
include = ["aicleaner*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
aicleaner = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "google.generativeai.*",
    "paho.mqtt.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "provider: marks tests that require external AI providers",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true