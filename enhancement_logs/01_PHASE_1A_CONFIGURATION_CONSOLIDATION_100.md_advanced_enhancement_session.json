{
  "prompt_file": "/home/drewcifer/aicleaner_v3/finalized prompts/01_PHASE_1A_CONFIGURATION_CONSOLIDATION_100.md",
  "timestamp": "2025-07-15T20:39:51.793893",
  "original_content": "# Phase 1A: Configuration Schema Consolidation - Final 99/100 Readiness\n\n## 1. Context & Objective\n- **Primary Goal**: Consolidate three separate configuration files into a unified, validated schema that eliminates redundancy and conflicts while maintaining backward compatibility\n- **Phase Context**: This is the critical foundation step of Phase 1 that all subsequent improvements depend on - configuration clarity is essential for reliable addon operation\n- **Success Impact**: Enables streamlined configuration management, reduces user confusion, and provides solid base for AI model management enhancements in Phase 2\n\n## 2. Implementation Requirements\n\n### Core Tasks\n1. **Configuration Schema Analysis and Mapping**\n   - **Action**: Analyze and map all configuration keys across three config files to identify overlaps, conflicts, and dependencies\n   - **Details**: Create comprehensive mapping with TDD approach using configuration validation tests and clear component interface contracts for schema handling\n   - **Validation**: Write failing tests using AAA pattern that verify schema completeness, then implement schema validation to pass tests\n\n2. **Unified Schema Design with Interface Contracts**\n   - **Action**: Design single, authoritative configuration schema with clear component interfaces and validation rules\n   - **Details**: Create modular configuration components (AI settings, zone configs, performance settings) with proper type validation, default values, and stable interface contracts\n   - **Validation**: Implement schema validation tests using AAA pattern with comprehensive edge case coverage\n\n3. **Migration Strategy with Rollback Validation**\n   - **Action**: Develop automated migration logic with comprehensive rollback testing and validation procedures\n   - **Details**: Create backup mechanisms, version detection, rollback capabilities, and migration validation following component-based design principles\n   - **Validation**: Test migration scenarios including rollback procedures using AAA pattern with various configuration states\n\n### Technical Specifications\n- **Required Tools**: pytest, jsonschema, PyYAML, Home Assistant config validation utilities, coverage.py\n- **Key Configurations**: Single `config.yaml` at addon root with validated schema, deprecated config files gracefully handled\n- **Integration Points**: Home Assistant addon config validation, MQTT discovery configuration, AI provider settings\n- **Component Contracts**: ConfigLoader interface, SchemaValidator interface, MigrationManager interface with version compatibility\n- **Testing Strategy**: Unit tests for schema validation, integration tests for migration logic, component tests for config loading with AAA pattern\n\n### Security Considerations\n- **Input Validation**: All configuration inputs validated against schema with sanitization for special characters and injection prevention\n- **API Security**: Secure handling of API keys and sensitive configuration data with encryption at rest\n- **Data Protection**: User configuration data encrypted and stored securely with access controls\n- **HA Security Compliance**: [HA Security Documentation - Configuration](https://developers.home-assistant.io/docs/add-ons/security/#configuration-security)\n\n## 3. Implementation Validation Framework\n\n### Self-Assessment Checklist (8 Items)\n- [ ] All three configuration files successfully mapped with zero conflicts identified\n- [ ] Unified schema validates all known configuration scenarios with 100% test coverage\n- [ ] Migration logic handles all edge cases including corrupted configs with AAA test validation\n- [ ] Performance baseline established: config loading <200ms, migration <5s, 10 concurrent accesses <500ms, 3 simultaneous migrations <150MB memory\n- [ ] Security validation: all inputs sanitized with injection prevention test cases, sensitive data encrypted\n- [ ] Component interface contracts documented with stability guarantees and validated via abstract base classes and conformance tests\n- [ ] Rollback procedures tested and validated with automated test scenarios including data persistence verification\n- [ ] All configuration options properly documented within Home Assistant addon configuration panel\n\n### Integration Gates\n- **Phase Entry Criteria**: Phase 0 pre-implementation audit completed with baseline metrics established\n- **Phase Exit Criteria**: All configuration tests pass, migration validated, security scan clean, performance baseline met\n- **Rollback Test**: Simulate migration failure and verify automated rollback restores original configuration files\n\n### Performance Baseline\n- **Measurement Strategy**: Benchmark config loading times, memory usage during migration, validation performance\n- **Acceptable Ranges**: Config loading <200ms, migration memory <100MB, validation <50ms per config\n- **Monitoring Setup**: Track config load times, migration success rates, validation errors during development\n\n## 4. Quality Assurance\n\n### Success Criteria (Validation-Based)\n- [ ] All three configuration files consolidated with comprehensive test validation demonstrating zero conflicts\n- [ ] Schema validation prevents invalid configurations with failing test examples proving robustness\n- [ ] Backward compatibility maintained with migration tests covering all historical config versions\n- [ ] Component interface contracts validated and documented with stability guarantees\n- [ ] Security requirements validated through automated security testing and manual review\n\n### Component Design Validation\n- [ ] ConfigLoader has single responsibility for configuration management with measurable independence\n- [ ] SchemaValidator interface clearly defined with documented contracts and version stability\n- [ ] MigrationManager achieves loose coupling with other components through well-defined interfaces\n- [ ] High cohesion within configuration module with focused, related functionality\n\n### Risk Mitigation Validation\n- **High Risk Scenarios**: Test configuration corruption, invalid schema changes, migration failures with comprehensive AAA tests\n- **Rollback Validation**: Automated tests for rollback scenarios including partial migration failures\n- **Failure Recovery**: Validation of error handling during config loading, schema validation errors, migration interruptions\n\n## 5. Production Readiness Validation\n\n### Deployment Readiness\n- **Smoke Tests**: Basic config loading, schema validation, migration detection after deployment\n- **User Scenario Validation**: Existing user configs migrate successfully, new installations use unified schema\n- **Performance Under Load**: Config system handles concurrent access, multiple migration attempts gracefully\n\n### Operational Readiness\n- **Monitoring Setup**: Config load time alerts, migration failure notifications, schema validation error tracking\n- **Logging Validation**: Comprehensive logging for config loading, migration steps, validation errors for troubleshooting\n- **Documentation Complete**: Migration procedures, troubleshooting guide, configuration reference documentation\n- **Rollback Procedures**: Validated rollback with automated testing and documented manual procedures\n\n### User-Facing Error Reporting Strategy\n- **Error Classification**: Clear categorization of configuration errors (validation failures, migration issues, compatibility problems) with user-friendly descriptions\n- **Progressive Error Disclosure**: Basic error message for users, detailed technical information available for troubleshooting, developer logs for debugging\n- **Recovery Guidance**: Specific steps for users to resolve common configuration issues, links to documentation, automated recovery suggestions where possible\n- **Error Prevention**: Real-time validation feedback during configuration editing, warning messages for potentially problematic settings, confirmation dialogs for destructive actions\n\n### Structured Logging Strategy\n- **Log Levels**: DEBUG (configuration parsing details), INFO (migration progress, validation success), WARN (deprecated settings, potential issues), ERROR (validation failures, migration problems), CRITICAL (configuration corruption, system failures)\n- **Log Format Standards**: Structured JSON logs with timestamps, component identifiers, correlation IDs for tracking related operations, standardized message formats for automated parsing\n- **Contextual Information**: User configuration metadata (without sensitive data), system environment details, operation timing and performance metrics, error context and stack traces\n- **Integration Requirements**: Home Assistant logging system compatibility, centralized log aggregation support, configurable log levels, automated log rotation and cleanup\n\n## 6. Deliverables\n\n### Primary Outputs\n- **Code**: Unified configuration schema module with comprehensive test coverage (>95%)\n- **Tests**: Complete test suite following AAA pattern with component validation and migration scenarios\n- **Documentation**: Updated configuration documentation, migration guide, troubleshooting procedures\n- **Validation Report**: Self-assessment checklist completion with evidence and performance metrics\n\n### Review Requirements\n- **Test Coverage**: Minimum 95% coverage for configuration module with AAA pattern compliance\n- **Code Review**: Schema design review, migration logic validation, component contract assessment\n- **Integration Testing**: Full addon startup testing with various configuration scenarios and rollback validation\n\n## 7. Implementation Notes\n\n### Development Approach\n- **TDD Cycle**: Write configuration validation tests first using AAA pattern, implement schema validation to pass tests, refactor for clarity and performance\n- **AAA Pattern Examples**:\n  ```python\n  def test_schema_validation_with_invalid_ai_provider():\n      # Arrange\n      invalid_config = {\"ai_provider\": \"invalid_provider\", \"temperature\": 0.7}\n      validator = ConfigSchemaValidator()\n      \n      # Act\n      result = validator.validate(invalid_config)\n      \n      # Assert\n      assert not result.is_valid\n      assert \"ai_provider\" in result.errors\n      assert \"invalid_provider\" in result.errors[\"ai_provider\"]\n  \n  def test_input_sanitization_prevents_injection():\n      # Arrange\n      malicious_input = {\"name\": \"<script>alert('xss')</script>\", \"path\": \"../../../etc/passwd\"}\n      sanitizer = ConfigInputSanitizer()\n      \n      # Act\n      sanitized = sanitizer.sanitize(malicious_input)\n      \n      # Assert\n      assert \"<script>\" not in sanitized[\"name\"]\n      assert \"../\" not in sanitized[\"path\"]\n      assert sanitized[\"name\"] == \"alert('xss')\"\n  ```\n- **Component Strategy**: Design configuration module for easy testing, future extensibility, and clear interface contracts\n\n### Technical Guidelines\n- **Time Estimate**: 40-50 hours including comprehensive testing, validation, and documentation\n- **Dependencies**: Completion of Phase 0 pre-implementation audit with documented baseline metrics\n- **HA Standards**: [HA Addon Configuration Schema](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema) compliance required\n\n### MCP Server Usage Requirements\n- **Mandatory MCP Servers**: \n  - **WebFetch**: Research current HA addon configuration standards from developers.home-assistant.io\n  - **GitHub MCP**: **CRITICAL** - Version control for configuration changes and rollback capability\n- **Optional MCP Servers**:\n  - **zen**: Collaborate with Gemini for complex schema design decisions and validation strategy\n  - **Task**: Search for existing configuration patterns and validation approaches across the project\n- **Research Requirements**: Use WebFetch to validate against latest HA addon config documentation before implementation\n- **Analysis Requirements**: Apply Context7 sequential thinking for configuration migration strategy analysis\n- **Version Control Requirements**: Create feature branch `phase-1a-config-consolidation`, commit after each milestone\n- **Monitoring Integration**: Use GitHub MCP to track configuration change progress and validation status\n\n### Home Assistant Compliance Notes\n- **Critical Compliance Issues**: \n  - Configuration schema must include required `name`, `version`, `slug` fields\n  - All configuration options must have proper `type` and `description` fields\n  - Default values required for optional configuration parameters\n- **Specific Documentation**: \n  - [Configuration Schema Requirements](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema)\n  - [Addon Manifest Validation](https://developers.home-assistant.io/docs/add-ons/configuration/#add-on-configuration)\n- **Validation Requirements**: Run `ha addons validate` command to verify schema compliance\n\n### Rollback and Recovery Procedures\n- **Pre-Phase Checkpoint**: Use GitHub MCP to create branch `phase-1a-config-consolidation` and commit current state\n- **Incremental Commits**: Commit after each configuration file analysis, schema design milestone, and migration step\n- **Rollback Triggers**: Configuration validation failures (>5% error rate), user configuration corruption, migration errors affecting >10% of configs\n- **Recovery Strategy**: Use GitHub MCP to revert to last stable commit, restore backup configurations from automated backups, restart consolidation from validated checkpoint\n\n### Collaborative Review and Validation Process\n- **Implementation Validation**: Complete configuration consolidation, schema validation, and migration logic with all tests passing\n- **Self-Assessment**: Verify all seven checklist items met with documented evidence and performance metrics\n- **Gemini Review Request**: Use zen MCP to request comprehensive Gemini review of:\n  - Configuration schema design and validation logic effectiveness\n  - Migration strategy safety, completeness, and edge case handling\n  - Test coverage adequacy and AAA pattern implementation quality\n  - Home Assistant configuration compliance and certification readiness\n- **Collaborative Analysis**: Work with Gemini to identify:\n  - Schema design improvements and validation gaps with specific recommendations\n  - Migration edge cases and safety enhancements not previously considered\n  - Test coverage gaps and additional validation scenarios\n  - Configuration optimization opportunities for performance and usability\n- **Iterative Refinement**: Implement Gemini's suggested improvements:\n  - Enhance schema validation and error handling based on expert feedback\n  - Add missing migration scenarios and safety checks identified in review\n  - Expand test coverage for edge cases discovered through collaboration\n  - Optimize configuration structure and defaults for better user experience\n- **Re-Review Cycle**: Have Gemini review changes until consensus achieved on:\n  - Schema robustness and validation completeness meeting production standards\n  - Migration safety and reliability with comprehensive error handling\n  - Test coverage adequacy and quality exceeding industry standards\n  - Overall configuration architecture excellence and maintainability\n- **Final Consensus**: Both parties agree configuration consolidation is production-ready and meets all quality standards\n\n### Key References\n- [Home Assistant Addon Configuration Schema](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema)\n- [HA Security - Configuration Security](https://developers.home-assistant.io/docs/add-ons/security/#configuration-security)\n- [PROJECT_STATE_MEMORY.md](../PROJECT_STATE_MEMORY.md)\n- [Enhanced Consensus Template](ENHANCED_CONSENSUS_TEMPLATE_90PLUS.md)\n\n---\n*This enhanced Phase 1A prompt incorporates all Claude-Gemini consensus improvements to achieve 90+ implementation readiness while establishing the configuration foundation that enables all subsequent improvements.*",
  "assessment_round": {
    "timestamp": "2025-07-15T20:39:53.798094",
    "request": "Assessment request",
    "response": "\n**IMPROVEMENT_AREA_IMPLEMENTATION_SPECIFICITY**:\n- **Issue**: Generic implementation details without concrete examples\n- **Impact**: Developers lack specific guidance for implementation\n- **Specific_Need**: Add concrete code patterns, specific API calls, configuration examples\n- **Priority**: High\n\n**IMPROVEMENT_AREA_ERROR_HANDLING**:\n- **Issue**: Basic error handling without specific failure scenarios\n- **Impact**: Incomplete error recovery procedures\n- **Specific_Need**: Add specific error types, recovery procedures, logging patterns\n- **Priority**: Medium\n\n**IMPROVEMENT_AREA_PERFORMANCE_SPECS**:\n- **Issue**: Missing specific performance requirements and metrics\n- **Impact**: Cannot validate implementation performance\n- **Specific_Need**: Add specific timeout values, memory limits, response time requirements\n- **Priority**: Medium\n"
  },
  "implementation_rounds": [
    {
      "area": {
        "name": "IMPLEMENTATION_SPECIFICITY",
        "details": {
          "issue": "Generic implementation details without concrete examples",
          "impact": "Developers lack specific guidance for implementation",
          "specific_need": "Add concrete code patterns, specific API calls, configuration examples",
          "priority": "High"
        },
        "raw_content": "- **Issue**: Generic implementation details without concrete examples\n- **Impact**: Developers lack specific guidance for implementation\n- **Specific_Need**: Add concrete code patterns, specific API calls, configuration examples\n- **Priority**: High"
      },
      "patch_request": "\n```diff\n--- BEFORE\n- **Technical Specifications**: Required tools, integration requirements, performance requirements\n\n+++ AFTER\n- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)\n```\n",
      "parsed_patch": {
        "before": "- **Technical Specifications**: Required tools, integration requirements, performance requirements",
        "after": "- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)",
        "raw_patch": "--- BEFORE\n- **Technical Specifications**: Required tools, integration requirements, performance requirements\n\n+++ AFTER\n- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)"
      },
      "applied": false,
      "timestamp": "2025-07-15T20:39:54.848285"
    },
    {
      "area": {
        "name": "ERROR_HANDLING",
        "details": {
          "issue": "Basic error handling without specific failure scenarios",
          "impact": "Incomplete error recovery procedures",
          "specific_need": "Add specific error types, recovery procedures, logging patterns",
          "priority": "Medium"
        },
        "raw_content": "- **Issue**: Basic error handling without specific failure scenarios\n- **Impact**: Incomplete error recovery procedures\n- **Specific_Need**: Add specific error types, recovery procedures, logging patterns\n- **Priority**: Medium"
      },
      "patch_request": "\n```diff\n--- BEFORE\n- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts, continuous HA service availability checking, automated HA entity state validation, pre-configuration validation for HA compatibility\n\n+++ AFTER\n- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts and automatic reconnection (max 3 retries with exponential backoff), continuous HA service availability checking with circuit breaker pattern, automated HA entity state validation with conflict resolution, pre-configuration validation for HA compatibility with specific error codes (ERR_SUPERVISOR_001: Connection timeout, ERR_SERVICE_002: Invalid service call, ERR_ENTITY_003: Registration failure)\n```\n",
      "parsed_patch": {
        "before": "- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts, continuous HA service availability checking, automated HA entity state validation, pre-configuration validation for HA compatibility",
        "after": "- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts and automatic reconnection (max 3 retries with exponential backoff), continuous HA service availability checking with circuit breaker pattern, automated HA entity state validation with conflict resolution, pre-configuration validation for HA compatibility with specific error codes (ERR_SUPERVISOR_001: Connection timeout, ERR_SERVICE_002: Invalid service call, ERR_ENTITY_003: Registration failure)",
        "raw_patch": "--- BEFORE\n- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts, continuous HA service availability checking, automated HA entity state validation, pre-configuration validation for HA compatibility\n\n+++ AFTER\n- **Error Prevention**: Proactive HA Supervisor health monitoring with early warning alerts and automatic reconnection (max 3 retries with exponential backoff), continuous HA service availability checking with circuit breaker pattern, automated HA entity state validation with conflict resolution, pre-configuration validation for HA compatibility with specific error codes (ERR_SUPERVISOR_001: Connection timeout, ERR_SERVICE_002: Invalid service call, ERR_ENTITY_003: Registration failure)"
      },
      "applied": false,
      "timestamp": "2025-07-15T20:39:55.855872"
    },
    {
      "area": {
        "name": "PERFORMANCE_SPECS",
        "details": {
          "issue": "Missing specific performance requirements and metrics",
          "impact": "Cannot validate implementation performance",
          "specific_need": "Add specific timeout values, memory limits, response time requirements",
          "priority": "Medium"
        },
        "raw_content": "- **Issue**: Missing specific performance requirements and metrics\n- **Impact**: Cannot validate implementation performance\n- **Specific_Need**: Add specific timeout values, memory limits, response time requirements\n- **Priority**: Medium"
      },
      "patch_request": "\n```diff\n--- BEFORE\n- **Technical Specifications**: Required tools, integration requirements, performance requirements\n\n+++ AFTER\n- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)\n```\n",
      "parsed_patch": {
        "before": "- **Technical Specifications**: Required tools, integration requirements, performance requirements",
        "after": "- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)",
        "raw_patch": "--- BEFORE\n- **Technical Specifications**: Required tools, integration requirements, performance requirements\n\n+++ AFTER\n- **Technical Specifications**: Required tools with specific versions (homeassistant>=2023.6.0, aiohttp>=3.8.0, pydantic>=2.0.0), integration requirements with compatibility matrix, performance requirements with specific SLAs (API response <200ms, entity updates <100ms, memory usage <150MB)"
      },
      "applied": false,
      "timestamp": "2025-07-15T20:39:56.880578"
    }
  ],
  "applied_patches": [],
  "final_enhancement": "# Phase 1A: Configuration Schema Consolidation - Final 99/100 Readiness\n\n## 1. Context & Objective\n- **Primary Goal**: Consolidate three separate configuration files into a unified, validated schema that eliminates redundancy and conflicts while maintaining backward compatibility\n- **Phase Context**: This is the critical foundation step of Phase 1 that all subsequent improvements depend on - configuration clarity is essential for reliable addon operation\n- **Success Impact**: Enables streamlined configuration management, reduces user confusion, and provides solid base for AI model management enhancements in Phase 2\n\n## 2. Implementation Requirements\n\n### Core Tasks\n1. **Configuration Schema Analysis and Mapping**\n   - **Action**: Analyze and map all configuration keys across three config files to identify overlaps, conflicts, and dependencies\n   - **Details**: Create comprehensive mapping with TDD approach using configuration validation tests and clear component interface contracts for schema handling\n   - **Validation**: Write failing tests using AAA pattern that verify schema completeness, then implement schema validation to pass tests\n\n2. **Unified Schema Design with Interface Contracts**\n   - **Action**: Design single, authoritative configuration schema with clear component interfaces and validation rules\n   - **Details**: Create modular configuration components (AI settings, zone configs, performance settings) with proper type validation, default values, and stable interface contracts\n   - **Validation**: Implement schema validation tests using AAA pattern with comprehensive edge case coverage\n\n3. **Migration Strategy with Rollback Validation**\n   - **Action**: Develop automated migration logic with comprehensive rollback testing and validation procedures\n   - **Details**: Create backup mechanisms, version detection, rollback capabilities, and migration validation following component-based design principles\n   - **Validation**: Test migration scenarios including rollback procedures using AAA pattern with various configuration states\n\n### Technical Specifications\n- **Required Tools**: pytest, jsonschema, PyYAML, Home Assistant config validation utilities, coverage.py\n- **Key Configurations**: Single `config.yaml` at addon root with validated schema, deprecated config files gracefully handled\n- **Integration Points**: Home Assistant addon config validation, MQTT discovery configuration, AI provider settings\n- **Component Contracts**: ConfigLoader interface, SchemaValidator interface, MigrationManager interface with version compatibility\n- **Testing Strategy**: Unit tests for schema validation, integration tests for migration logic, component tests for config loading with AAA pattern\n\n### Security Considerations\n- **Input Validation**: All configuration inputs validated against schema with sanitization for special characters and injection prevention\n- **API Security**: Secure handling of API keys and sensitive configuration data with encryption at rest\n- **Data Protection**: User configuration data encrypted and stored securely with access controls\n- **HA Security Compliance**: [HA Security Documentation - Configuration](https://developers.home-assistant.io/docs/add-ons/security/#configuration-security)\n\n## 3. Implementation Validation Framework\n\n### Self-Assessment Checklist (8 Items)\n- [ ] All three configuration files successfully mapped with zero conflicts identified\n- [ ] Unified schema validates all known configuration scenarios with 100% test coverage\n- [ ] Migration logic handles all edge cases including corrupted configs with AAA test validation\n- [ ] Performance baseline established: config loading <200ms, migration <5s, 10 concurrent accesses <500ms, 3 simultaneous migrations <150MB memory\n- [ ] Security validation: all inputs sanitized with injection prevention test cases, sensitive data encrypted\n- [ ] Component interface contracts documented with stability guarantees and validated via abstract base classes and conformance tests\n- [ ] Rollback procedures tested and validated with automated test scenarios including data persistence verification\n- [ ] All configuration options properly documented within Home Assistant addon configuration panel\n\n### Integration Gates\n- **Phase Entry Criteria**: Phase 0 pre-implementation audit completed with baseline metrics established\n- **Phase Exit Criteria**: All configuration tests pass, migration validated, security scan clean, performance baseline met\n- **Rollback Test**: Simulate migration failure and verify automated rollback restores original configuration files\n\n### Performance Baseline\n- **Measurement Strategy**: Benchmark config loading times, memory usage during migration, validation performance\n- **Acceptable Ranges**: Config loading <200ms, migration memory <100MB, validation <50ms per config\n- **Monitoring Setup**: Track config load times, migration success rates, validation errors during development\n\n## 4. Quality Assurance\n\n### Success Criteria (Validation-Based)\n- [ ] All three configuration files consolidated with comprehensive test validation demonstrating zero conflicts\n- [ ] Schema validation prevents invalid configurations with failing test examples proving robustness\n- [ ] Backward compatibility maintained with migration tests covering all historical config versions\n- [ ] Component interface contracts validated and documented with stability guarantees\n- [ ] Security requirements validated through automated security testing and manual review\n\n### Component Design Validation\n- [ ] ConfigLoader has single responsibility for configuration management with measurable independence\n- [ ] SchemaValidator interface clearly defined with documented contracts and version stability\n- [ ] MigrationManager achieves loose coupling with other components through well-defined interfaces\n- [ ] High cohesion within configuration module with focused, related functionality\n\n### Risk Mitigation Validation\n- **High Risk Scenarios**: Test configuration corruption, invalid schema changes, migration failures with comprehensive AAA tests\n- **Rollback Validation**: Automated tests for rollback scenarios including partial migration failures\n- **Failure Recovery**: Validation of error handling during config loading, schema validation errors, migration interruptions\n\n## 5. Production Readiness Validation\n\n### Deployment Readiness\n- **Smoke Tests**: Basic config loading, schema validation, migration detection after deployment\n- **User Scenario Validation**: Existing user configs migrate successfully, new installations use unified schema\n- **Performance Under Load**: Config system handles concurrent access, multiple migration attempts gracefully\n\n### Operational Readiness\n- **Monitoring Setup**: Config load time alerts, migration failure notifications, schema validation error tracking\n- **Logging Validation**: Comprehensive logging for config loading, migration steps, validation errors for troubleshooting\n- **Documentation Complete**: Migration procedures, troubleshooting guide, configuration reference documentation\n- **Rollback Procedures**: Validated rollback with automated testing and documented manual procedures\n\n### User-Facing Error Reporting Strategy\n- **Error Classification**: Clear categorization of configuration errors (validation failures, migration issues, compatibility problems) with user-friendly descriptions\n- **Progressive Error Disclosure**: Basic error message for users, detailed technical information available for troubleshooting, developer logs for debugging\n- **Recovery Guidance**: Specific steps for users to resolve common configuration issues, links to documentation, automated recovery suggestions where possible\n- **Error Prevention**: Real-time validation feedback during configuration editing, warning messages for potentially problematic settings, confirmation dialogs for destructive actions\n\n### Structured Logging Strategy\n- **Log Levels**: DEBUG (configuration parsing details), INFO (migration progress, validation success), WARN (deprecated settings, potential issues), ERROR (validation failures, migration problems), CRITICAL (configuration corruption, system failures)\n- **Log Format Standards**: Structured JSON logs with timestamps, component identifiers, correlation IDs for tracking related operations, standardized message formats for automated parsing\n- **Contextual Information**: User configuration metadata (without sensitive data), system environment details, operation timing and performance metrics, error context and stack traces\n- **Integration Requirements**: Home Assistant logging system compatibility, centralized log aggregation support, configurable log levels, automated log rotation and cleanup\n\n## 6. Deliverables\n\n### Primary Outputs\n- **Code**: Unified configuration schema module with comprehensive test coverage (>95%)\n- **Tests**: Complete test suite following AAA pattern with component validation and migration scenarios\n- **Documentation**: Updated configuration documentation, migration guide, troubleshooting procedures\n- **Validation Report**: Self-assessment checklist completion with evidence and performance metrics\n\n### Review Requirements\n- **Test Coverage**: Minimum 95% coverage for configuration module with AAA pattern compliance\n- **Code Review**: Schema design review, migration logic validation, component contract assessment\n- **Integration Testing**: Full addon startup testing with various configuration scenarios and rollback validation\n\n## 7. Implementation Notes\n\n### Development Approach\n- **TDD Cycle**: Write configuration validation tests first using AAA pattern, implement schema validation to pass tests, refactor for clarity and performance\n- **AAA Pattern Examples**:\n  ```python\n  def test_schema_validation_with_invalid_ai_provider():\n      # Arrange\n      invalid_config = {\"ai_provider\": \"invalid_provider\", \"temperature\": 0.7}\n      validator = ConfigSchemaValidator()\n      \n      # Act\n      result = validator.validate(invalid_config)\n      \n      # Assert\n      assert not result.is_valid\n      assert \"ai_provider\" in result.errors\n      assert \"invalid_provider\" in result.errors[\"ai_provider\"]\n  \n  def test_input_sanitization_prevents_injection():\n      # Arrange\n      malicious_input = {\"name\": \"<script>alert('xss')</script>\", \"path\": \"../../../etc/passwd\"}\n      sanitizer = ConfigInputSanitizer()\n      \n      # Act\n      sanitized = sanitizer.sanitize(malicious_input)\n      \n      # Assert\n      assert \"<script>\" not in sanitized[\"name\"]\n      assert \"../\" not in sanitized[\"path\"]\n      assert sanitized[\"name\"] == \"alert('xss')\"\n  ```\n- **Component Strategy**: Design configuration module for easy testing, future extensibility, and clear interface contracts\n\n### Technical Guidelines\n- **Time Estimate**: 40-50 hours including comprehensive testing, validation, and documentation\n- **Dependencies**: Completion of Phase 0 pre-implementation audit with documented baseline metrics\n- **HA Standards**: [HA Addon Configuration Schema](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema) compliance required\n\n### MCP Server Usage Requirements\n- **Mandatory MCP Servers**: \n  - **WebFetch**: Research current HA addon configuration standards from developers.home-assistant.io\n  - **GitHub MCP**: **CRITICAL** - Version control for configuration changes and rollback capability\n- **Optional MCP Servers**:\n  - **zen**: Collaborate with Gemini for complex schema design decisions and validation strategy\n  - **Task**: Search for existing configuration patterns and validation approaches across the project\n- **Research Requirements**: Use WebFetch to validate against latest HA addon config documentation before implementation\n- **Analysis Requirements**: Apply Context7 sequential thinking for configuration migration strategy analysis\n- **Version Control Requirements**: Create feature branch `phase-1a-config-consolidation`, commit after each milestone\n- **Monitoring Integration**: Use GitHub MCP to track configuration change progress and validation status\n\n### Home Assistant Compliance Notes\n- **Critical Compliance Issues**: \n  - Configuration schema must include required `name`, `version`, `slug` fields\n  - All configuration options must have proper `type` and `description` fields\n  - Default values required for optional configuration parameters\n- **Specific Documentation**: \n  - [Configuration Schema Requirements](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema)\n  - [Addon Manifest Validation](https://developers.home-assistant.io/docs/add-ons/configuration/#add-on-configuration)\n- **Validation Requirements**: Run `ha addons validate` command to verify schema compliance\n\n### Rollback and Recovery Procedures\n- **Pre-Phase Checkpoint**: Use GitHub MCP to create branch `phase-1a-config-consolidation` and commit current state\n- **Incremental Commits**: Commit after each configuration file analysis, schema design milestone, and migration step\n- **Rollback Triggers**: Configuration validation failures (>5% error rate), user configuration corruption, migration errors affecting >10% of configs\n- **Recovery Strategy**: Use GitHub MCP to revert to last stable commit, restore backup configurations from automated backups, restart consolidation from validated checkpoint\n\n### Collaborative Review and Validation Process\n- **Implementation Validation**: Complete configuration consolidation, schema validation, and migration logic with all tests passing\n- **Self-Assessment**: Verify all seven checklist items met with documented evidence and performance metrics\n- **Gemini Review Request**: Use zen MCP to request comprehensive Gemini review of:\n  - Configuration schema design and validation logic effectiveness\n  - Migration strategy safety, completeness, and edge case handling\n  - Test coverage adequacy and AAA pattern implementation quality\n  - Home Assistant configuration compliance and certification readiness\n- **Collaborative Analysis**: Work with Gemini to identify:\n  - Schema design improvements and validation gaps with specific recommendations\n  - Migration edge cases and safety enhancements not previously considered\n  - Test coverage gaps and additional validation scenarios\n  - Configuration optimization opportunities for performance and usability\n- **Iterative Refinement**: Implement Gemini's suggested improvements:\n  - Enhance schema validation and error handling based on expert feedback\n  - Add missing migration scenarios and safety checks identified in review\n  - Expand test coverage for edge cases discovered through collaboration\n  - Optimize configuration structure and defaults for better user experience\n- **Re-Review Cycle**: Have Gemini review changes until consensus achieved on:\n  - Schema robustness and validation completeness meeting production standards\n  - Migration safety and reliability with comprehensive error handling\n  - Test coverage adequacy and quality exceeding industry standards\n  - Overall configuration architecture excellence and maintainability\n- **Final Consensus**: Both parties agree configuration consolidation is production-ready and meets all quality standards\n\n### Key References\n- [Home Assistant Addon Configuration Schema](https://developers.home-assistant.io/docs/add-ons/configuration/#configuration-schema)\n- [HA Security - Configuration Security](https://developers.home-assistant.io/docs/add-ons/security/#configuration-security)\n- [PROJECT_STATE_MEMORY.md](../PROJECT_STATE_MEMORY.md)\n- [Enhanced Consensus Template](ENHANCED_CONSENSUS_TEMPLATE_90PLUS.md)\n\n---\n*This enhanced Phase 1A prompt incorporates all Claude-Gemini consensus improvements to achieve 90+ implementation readiness while establishing the configuration foundation that enables all subsequent improvements.*",
  "success": false,
  "improvement_score": 0.0,
  "changes_applied": false
}