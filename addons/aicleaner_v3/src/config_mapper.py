#!/usr/bin/env python3
"""
Configuration Mapper for AICleaner v3 Home Assistant Addon
Maps simplified Home Assistant addon options to complex internal configuration structure.
"""

import json
import yaml
import os
import sys
from pathlib import Path
from typing import Dict, Any, List


def load_addon_options() -> Dict[str, Any]:
    """Load addon options from Home Assistant options.json file."""
    options_file = Path("/data/options.json")
    
    if not options_file.exists():
        print("WARNING: No options.json found, using defaults")
        return {}
    
    try:
        with open(options_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"ERROR: Failed to load options.json: {e}")
        return {}


def map_log_level(addon_log_level: str) -> str:
    """Map addon log level to internal format."""
    level_mapping = {
        "debug": "DEBUG",
        "info": "INFO", 
        "warning": "WARNING",
        "error": "ERROR"
    }
    return level_mapping.get(addon_log_level.lower(), "INFO")


def determine_active_provider(primary_api_key: str, backup_api_keys: List[str]) -> str:
    """Determine which AI provider to use based on available API keys."""
    # Check if we have Gemini API key (preferred)
    if primary_api_key.strip():
        return "gemini"
    
    # Check backup keys for other providers
    for key in backup_api_keys:
        if key.strip():
            return "gemini"  # Use gemini for all cloud keys
    
    # Fallback to local Ollama
    return "ollama"


def create_user_config(options: Dict[str, Any]) -> Dict[str, Any]:
    """Create user configuration from addon options."""
    
    # Extract values with defaults
    log_level = options.get("log_level", "info")
    device_id = options.get("device_id", "aicleaner_v3")
    primary_api_key = options.get("primary_api_key", "")
    backup_api_keys = options.get("backup_api_keys", [])
    mqtt_discovery_prefix = options.get("mqtt_discovery_prefix", "homeassistant")
    debug_mode = options.get("debug_mode", False)
    auto_dashboard = options.get("auto_dashboard", True)
    
    # Determine active provider
    active_provider = determine_active_provider(primary_api_key, backup_api_keys)
    
    # Build user configuration
    user_config = {
        "general": {
            "active_provider": active_provider,
            "log_level": "DEBUG" if debug_mode else map_log_level(log_level)
        },
        "mqtt": {
            "auto_discovery": {
                "topic_prefix": mqtt_discovery_prefix
            }
        }
    }
    
    # Add AI provider configuration if keys are provided
    if primary_api_key.strip() or backup_api_keys:
        ai_providers = {}
        
        # Configure Gemini if primary key provided
        if primary_api_key.strip():
            ai_providers["gemini"] = {
                "api_key": primary_api_key
            }
        # Only use backup keys if no primary key is provided
        elif backup_api_keys:
            for key in backup_api_keys:
                if key.strip():
                    ai_providers["gemini"] = {
                        "api_key": key
                    }
                    break  # Use first valid backup key
        
        if ai_providers:
            user_config["ai_providers"] = ai_providers
    
    return user_config


def write_user_config(config: Dict[str, Any], target_path: str = "/app/src/app_config.user.yaml"):
    """Write user configuration to YAML file."""
    
    try:
        # Ensure directory exists
        target_dir = Path(target_path).parent
        target_dir.mkdir(parents=True, exist_ok=True)
        
        # Write configuration with header
        with open(target_path, 'w') as f:
            f.write("""# ------------------------------------------------------------------------------
# User Configuration - Auto-generated from Home Assistant Addon Options
#
# This file is automatically generated from the addon's configuration options.
# DO NOT EDIT MANUALLY - Use Home Assistant's addon configuration UI instead.
# ------------------------------------------------------------------------------

""")
            yaml.dump(config, f, default_flow_style=False, indent=2)
            
        print(f"âœ“ User configuration written to {target_path}")
        
    except Exception as e:
        print(f"ERROR: Failed to write user config: {e}")
        sys.exit(1)


def main():
    """Main configuration mapping function."""
    print("Mapping Home Assistant addon options to internal configuration...")
    
    # Load addon options
    options = load_addon_options()
    print(f"Loaded options: {list(options.keys())}")
    
    # Create user configuration
    user_config = create_user_config(options)
    
    # Write user configuration
    write_user_config(user_config)
    
    print("Configuration mapping completed successfully!")


if __name__ == "__main__":
    main()