# Production Docker Compose for AICleaner v3 with Ollama
# Production-ready setup with monitoring, security, and resource limits

version: '3.8'

services:
  # Ollama service for local LLM inference
  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: aicleaner-ollama-prod
    restart: always
    ports:
      - "127.0.0.1:11434:11434"  # Bind to localhost only for security
    volumes:
      - ollama_models:/data/models
      - ./scripts:/scripts:ro
      - ./config/ollama:/config:ro
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS_PATH=/data/models
      - OLLAMA_AUTO_DOWNLOAD=true
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_NUM_PARALLEL=1
    networks:
      - aicleaner_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["/scripts/health-check.sh", "full"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # AICleaner main application
  aicleaner:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_FROM: python:3.11-alpine
    container_name: aicleaner-app-prod
    restart: always
    ports:
      - "127.0.0.1:8099:8099"  # Bind to localhost only
    volumes:
      - aicleaner_data:/data/aicleaner
      - aicleaner_config:/config
      - aicleaner_logs:/logs
      - ./config.yaml:/app/config.yaml:ro
      - ./config/production.yaml:/app/production.yaml:ro
    environment:
      # Ollama Configuration
      - OLLAMA_HOST=ollama:11434
      - OLLAMA_MODELS_PATH=/data/models
      - OLLAMA_AUTO_DOWNLOAD=true
      
      # AICleaner Configuration
      - AICLEANER_DATA_PATH=/data/aicleaner
      - AICLEANER_LOG_LEVEL=INFO
      - AICLEANER_PRIVACY_LEVEL=strict
      - AICLEANER_ENVIRONMENT=production
      
      # Home Assistant Integration
      - HA_TOKEN=${HA_TOKEN}
      - HA_URL=${HA_URL}
      
      # Performance Settings
      - MAX_MEMORY_USAGE=4096
      - MAX_CPU_USAGE=80
      - QUANTIZATION_LEVEL=4
      
      # Security Settings
      - PYTHONHASHSEED=random
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - aicleaner_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8099', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Monitoring and metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: aicleaner-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - aicleaner_network
    profiles:
      - monitoring

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: aicleaner-loki
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - aicleaner_network
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  ollama_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/ollama_models
  aicleaner_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/aicleaner
  aicleaner_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/config
  aicleaner_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  prometheus_data:
    driver: local
  loki_data:
    driver: local

# Production network with custom subnet
networks:
  aicleaner_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: aicleaner-prod
