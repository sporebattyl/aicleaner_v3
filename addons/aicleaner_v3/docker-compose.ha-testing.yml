# Home Assistant Testing Docker Compose for AICleaner v3
# Enhanced configuration for sandbox testing with Supervisor API mock and real HA environment
# Designed for Gemini CLI sandbox integration with enhanced isolation

version: '3.8'

services:
  # Home Assistant Core for testing environment
  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: aicleaner-ha-test-${TEST_INSTANCE_ID:-default}
    restart: unless-stopped
    ports:
      - "${HA_API_PORT:-8123}:8123"
    volumes:
      # Testing-specific volumes with sandbox isolation
      - ha_test_config:/config
      - ha_test_share:/share
      - ha_test_media:/media
      - ./tests/ha_config:/config/testing:ro
      - ./addons:/addons:ro
      - /tmp/aicleaner_test:/tmp/testing
    environment:
      # Testing environment configuration
      - SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN:-test_supervisor_token_12345}
      - SUPERVISOR_API=http://supervisor_mock:8099
      - PYTHONPATH=/config/testing
      - HASS_TESTING=true
      - TZ=${TZ:-UTC}
      - LANG=en_US.UTF-8
    networks:
      - aicleaner_test_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${HA_MEMORY_LIMIT:-1.5g}
          cpus: '${HA_CPU_LIMIT:-1.0}'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=homeassistant"
      - "io.aicleaner.instance=${TEST_INSTANCE_ID:-default}"

  # Supervisor API Mock for realistic testing
  supervisor_mock:
    build:
      context: ./tests/supervisor_mock
      dockerfile: Dockerfile
    container_name: aicleaner-supervisor-mock-${TEST_INSTANCE_ID:-default}
    restart: unless-stopped
    ports:
      - "${SUPERVISOR_MOCK_PORT:-8099}:8099"
    volumes:
      - supervisor_mock_data:/data
      - ./tests/supervisor_mock/config:/config:ro
      - ./addons:/addons:ro
    environment:
      - MOCK_MODE=testing
      - ADDON_REGISTRY_PATH=/addons
      - SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN:-test_supervisor_token_12345}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - aicleaner_test_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.2'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=supervisor_mock"

  # Ollama service optimized for testing environment
  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
      args:
        - TESTING_MODE=true
    container_name: aicleaner-ollama-test-${TEST_INSTANCE_ID:-default}
    restart: unless-stopped
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      # Testing-specific model storage
      - ollama_test_models:/data/models
      - ./scripts:/scripts:ro
      - ./tests/ollama_config:/config:ro
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS_PATH=/data/models
      - OLLAMA_AUTO_DOWNLOAD=true
      - OLLAMA_KEEP_ALIVE=5m  # Shorter for testing
      - OLLAMA_MAX_LOADED_MODELS=1  # Reduced for testing
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_DEBUG=${OLLAMA_DEBUG:-false}
    networks:
      - aicleaner_test_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-1g}
          cpus: '${OLLAMA_CPU_LIMIT:-0.5}'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=ollama"
      - "io.aicleaner.component=local_llm"

  # AICleaner main application for testing
  aicleaner:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_FROM: python:3.11-alpine
        TESTING_MODE: "true"
    container_name: aicleaner-app-test-${TEST_INSTANCE_ID:-default}
    restart: unless-stopped
    ports:
      - "${AICLEANER_PORT:-8100}:8099"
    volumes:
      # Testing volume structure
      - aicleaner_test_data:/data
      - aicleaner_test_config:/config
      - aicleaner_test_logs:/logs
      - ./config.yaml:/app/config.yaml:ro
      - ./tests/test_config.yaml:/app/test_config.yaml:ro
      - ./tests/addon_options.json:/app/options.json:ro
      
      # Mount source code for development testing
      - ./ai:/app/ai:ro
      - ./core:/app/core:ro
      - ./integrations:/app/integrations:ro
      - ./tests:/app/tests:ro
    environment:
      # Ollama Configuration
      - OLLAMA_HOST=ollama:11434
      - OLLAMA_MODELS_PATH=/data/models
      - OLLAMA_AUTO_DOWNLOAD=true
      
      # AICleaner Testing Configuration
      - AICLEANER_DATA_PATH=/data
      - AICLEANER_LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - AICLEANER_PRIVACY_LEVEL=testing
      - AICLEANER_ENVIRONMENT=testing
      - AICLEANER_TESTING_MODE=true
      
      # Home Assistant Integration
      - SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN:-test_supervisor_token_12345}
      - HA_TOKEN=${HA_TOKEN:-test_ha_token_67890}
      - HA_URL=http://homeassistant:8123
      - SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN:-test_supervisor_token_12345}
      - SUPERVISOR_API=http://supervisor_mock:8099
      
      # AI Provider Configuration (with key rotation)
      - GEMINI_API_KEY=${GEMINI_API_KEY_1:-AIzaSyBtBJg2AHVlNYZCSco69JWGkCL8zDFQNzo}
      - GEMINI_API_KEY_BACKUP=${GEMINI_API_KEY_2:-AIzaSyAVvt7wJd6dNswtQINK2f4xA_8xdRUg0CI}
      - BRAVE_API_KEY=${BRAVE_API_KEY:-BSA0Iv5TiOTlCHrCSha2hkoo6PkiA7o}
      
      # Performance Settings for testing
      - MAX_MEMORY_USAGE=1024
      - MAX_CPU_USAGE=50
      - QUANTIZATION_LEVEL=8
      - MAX_CONCURRENT_REQUESTS=2
      
      # Testing specific settings
      - PYTEST_CURRENT_TEST=${PYTEST_CURRENT_TEST:-}
      - TESTING_INSTANCE_ID=${TEST_INSTANCE_ID:-default}
      - TZ=${TZ:-UTC}
    depends_on:
      homeassistant:
        condition: service_healthy
      supervisor_mock:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - aicleaner_test_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: ${AICLEANER_MEMORY_LIMIT:-1g}
          cpus: '${AICLEANER_CPU_LIMIT:-0.5}'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=aicleaner"
      - "io.aicleaner.component=main_app"
      - "io.hass.name=AICleaner v3 Testing"
      - "io.hass.description=AI-powered cleaning task management (Testing)"
      - "io.hass.type=addon"
      - "io.hass.version=3.0.0-test"

  # Test runner service for automated testing
  test_runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: aicleaner-test-runner-${TEST_INSTANCE_ID:-default}
    volumes:
      - ./tests:/app/tests:rw
      - ./aicleaner_v3:/app/aicleaner_v3:ro
      - test_results:/app/test_results
      - test_coverage:/app/coverage
    environment:
      - PYTHONPATH=/app
      - PYTEST_CURRENT_TEST=1
      - AICLEANER_ENVIRONMENT=testing
      - HA_URL=http://homeassistant:8123
      - SUPERVISOR_API=http://supervisor_mock:8099
      - OLLAMA_URL=http://ollama:11434
      - AICLEANER_URL=http://aicleaner:8099
      - TESTING_INSTANCE_ID=${TEST_INSTANCE_ID:-default}
    working_dir: /app
    networks:
      - aicleaner_test_network
    depends_on:
      aicleaner:
        condition: service_healthy
    profiles:
      - testing
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.3'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=test_runner"

  # Redis for testing caching and session management
  redis:
    image: redis:7-alpine
    container_name: aicleaner-redis-test-${TEST_INSTANCE_ID:-default}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_test_data:/data
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    networks:
      - aicleaner_test_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'
    profiles:
      - caching
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=redis"

  # Network testing helper for connectivity validation
  network_test:
    image: alpine:latest
    container_name: aicleaner-network-test-${TEST_INSTANCE_ID:-default}
    command: >
      sh -c "
        apk add --no-cache curl &&
        while true; do
          echo 'Testing network connectivity...' &&
          curl -f http://homeassistant:8123 &&
          curl -f http://supervisor_mock:8099/health &&
          curl -f http://ollama:11434/api/version &&
          curl -f http://aicleaner:8099/health &&
          echo 'All services are reachable' &&
          sleep 30
        done
      "
    networks:
      - aicleaner_test_network
    profiles:
      - network_test
    deploy:
      resources:
        limits:
          memory: 64m
          cpus: '0.05'
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.service=network_test"

# Testing-specific networks with sandbox isolation
networks:
  aicleaner_test_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: aicleaner_test_br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: "172.31.0.0/16"
          gateway: "172.31.0.1"
    labels:
      - "io.aicleaner.test=true"
      - "io.aicleaner.network=testing"

# Testing-specific volumes with proper isolation
volumes:
  # Home Assistant testing volumes
  ha_test_config:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=1000,gid=1000
  ha_test_share:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=50m,uid=1000,gid=1000
  ha_test_media:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=200m,uid=1000,gid=1000

  # AICleaner testing volumes
  aicleaner_test_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=500m,uid=1000,gid=1000
  aicleaner_test_config:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=10m,uid=1000,gid=1000
  aicleaner_test_logs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=1000,gid=1000

  # Ollama testing volumes
  ollama_test_models:
    driver: local
    # Use regular volume for models (they're large)
    
  # Supervisor mock data
  supervisor_mock_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=50m,uid=1000,gid=1000

  # Test results and coverage
  test_results:
    driver: local
  test_coverage:
    driver: local

  # Redis testing data
  redis_test_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=64m,uid=999,gid=999

# Testing configuration extension
x-testing-config: &testing-config
  # Resource limits for sandbox environment
  default_memory_limit: "1g"
  default_cpu_limit: "0.5"
  network_timeout: 30
  health_check_timeout: 10
  startup_timeout: 180
  
  # Security settings for testing
  security:
    apparmor: true
    seccomp: unconfined  # Relaxed for testing
    user_ns_mode: ""
    
  # Testing environment variables
  environment:
    TESTING_MODE: "true"
    SANDBOX_ISOLATION: "true"
    PYTEST_ENVIRONMENT: "docker"
    CI_TESTING: "${CI:-false}"

# Addon configuration for testing
x-addon-testing-config: &addon-testing-config
  name: "AICleaner v3 Testing"
  version: "3.0.0-test"
  slug: "aicleaner_v3_test"
  description: "AI-powered cleaning task management (Testing Environment)"
  arch:
    - amd64
    - aarch64
  startup: application
  boot: manual
  init: false
  hassio_api: true
  homeassistant_api: true
  host_network: false
  privileged: false
  full_access: false
  apparmor: true
  ingress: true
  ingress_port: 8099
  panel_icon: "mdi:test-tube"
  panel_title: "AI Cleaner Test"
  
  # Testing-specific options
  options:
    testing_mode: true
    log_level: "DEBUG"
    gemini_api_key: ""
    ollama_enabled: true
    ollama_host: "ollama:11434"
    privacy_level: "testing"
    performance_monitoring: true
    
  # Testing schema
  schema:
    testing_mode: "bool"
    log_level: "list(DEBUG|INFO|WARNING|ERROR)"
    gemini_api_key: "str?"
    ollama_enabled: "bool"
    ollama_host: "str"
    privacy_level: "list(testing|strict|standard|relaxed)"
    performance_monitoring: "bool"
    test_scenarios: ["str?"]
    mock_devices: ["str?"]