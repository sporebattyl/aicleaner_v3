# AICleaner v3 Home Assistant Automation Examples
# These examples show how to use the thin client HA integration services

# Example 1: Motion Detection with AI Camera Analysis
automation motion_analysis:
  alias: "Motion Detection AI Analysis"
  description: "Analyze camera when motion is detected"
  trigger:
    - platform: state
      entity_id: binary_sensor.living_room_motion
      to: "on"
  condition:
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
  action:
    - service: aicleaner.analyze_camera
      data:
        entity_id: camera.living_room
        prompt: "Analyze this image for any unusual activity, people, or objects. Focus on security concerns."
        provider: "gemini"  # Use vision-capable provider
        save_result: true
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_analysis_complete
      timeout: "00:01:00"
    - service: notify.mobile_app_phone
      data:
        title: "Motion Detected - AI Analysis"
        message: "{{ trigger.event.data.result.text[:200] }}"

# Example 2: Daily Security Summary
automation daily_security_summary:
  alias: "Daily Security AI Summary"
  description: "Generate daily security summary using AI"
  trigger:
    - platform: time
      at: "18:00:00"
  condition:
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
  action:
    - service: aicleaner.generate_text
      data:
        prompt: >
          Generate a daily security summary for {{ now().strftime('%Y-%m-%d') }}.
          Motion events: {{ states('sensor.daily_motion_count') }}
          Door openings: {{ states('sensor.daily_door_openings') }}
          Alert level: {{ states('input_select.security_level') }}
          Please provide a brief, friendly summary for the homeowner.
        provider: "anthropic"
        temperature: 0.3
        max_tokens: 500
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_generation_complete
      timeout: "00:01:00"
    - service: notify.family_devices
      data:
        title: "Daily Security Summary"
        message: "{{ trigger.event.data.result.text }}"

# Example 3: Smart Provider Switching Based on Conditions
automation smart_provider_switching:
  alias: "Smart AI Provider Selection"
  description: "Switch providers based on time and usage"
  trigger:
    - platform: time_pattern
      minutes: "/15"  # Check every 15 minutes
  condition:
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
  action:
    - choose:
        # During business hours, use faster cloud providers
        - conditions:
            - condition: time
              after: "08:00:00"
              before: "18:00:00"
            - condition: template
              value_template: "{{ states('sensor.aicleaner_providers') | int > 0 }}"
          sequence:
            - service: aicleaner.check_provider_status
              data:
                provider: "openai"
            - wait_for_trigger:
                - platform: event
                  event_type: aicleaner_provider_status
              timeout: "00:00:30"
            - if:
                - condition: template
                  value_template: "{{ trigger.event.data.status.available == true }}"
              then:
                - service: aicleaner.switch_provider
                  data:
                    provider: "openai"
        # During off-hours, use local providers to save costs
        - conditions:
            - condition: or
              conditions:
                - condition: time
                  before: "08:00:00"
                - condition: time
                  after: "22:00:00"
          sequence:
            - service: aicleaner.switch_provider
              data:
                provider: "ollama"

# Example 4: Camera Analysis with Custom Response
automation doorbell_visitor_analysis:
  alias: "Doorbell Visitor AI Analysis"
  description: "Analyze doorbell camera and generate custom response"
  trigger:
    - platform: state
      entity_id: binary_sensor.doorbell_button
      to: "on"
  condition:
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
  action:
    # First, analyze who's at the door
    - service: aicleaner.analyze_camera
      data:
        entity_id: camera.front_door
        prompt: "Analyze this doorbell camera image. Describe who is at the door, what they're wearing, and if they appear to be a delivery person, visitor, or unknown individual."
        provider: "gemini"
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_analysis_complete
      timeout: "00:01:00"
    
    # Then generate appropriate response
    - service: aicleaner.generate_text
      data:
        prompt: >
          Based on this doorbell camera analysis: "{{ trigger.event.data.result.text }}"
          
          Generate an appropriate automated voice response for the homeowner's smart speaker.
          Consider:
          - If it's a delivery, acknowledge and provide instructions
          - If it's a visitor, be welcoming but indicate the owner will be notified
          - If it's unclear, be polite but cautious
          - Keep the response under 30 words and friendly
        temperature: 0.4
        max_tokens: 100
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_generation_complete
      timeout: "00:01:00"
    
    # Send response to smart speaker
    - service: tts.speak
      data:
        entity_id: media_player.front_door_speaker
        message: "{{ trigger.event.data.result.text }}"
    
    # Notify homeowner
    - service: notify.mobile_app_phone
      data:
        title: "Doorbell Visitor"
        message: >
          Visitor Analysis: {{ states('sensor.aicleaner_last_analysis') }}
          
          AI Response: {{ states('sensor.aicleaner_last_generation') }}

# Example 5: Energy-Aware AI Usage
automation energy_conscious_ai:
  alias: "Energy-Conscious AI Usage"
  description: "Adjust AI provider based on energy costs and solar production"
  trigger:
    - platform: numeric_state
      entity_id: sensor.current_power_cost
      above: 0.15  # High energy cost threshold
    - platform: numeric_state
      entity_id: sensor.solar_power_production
      above: 2000  # Good solar production
  action:
    - choose:
        # High energy costs - use local providers
        - conditions:
            - condition: numeric_state
              entity_id: sensor.current_power_cost
              above: 0.15
          sequence:
            - service: aicleaner.switch_provider
              data:
                provider: "ollama"
            - service: persistent_notification.create
              data:
                title: "AI Provider Switched"
                message: "Switched to local Ollama provider due to high energy costs"
        
        # Good solar production - can use cloud providers
        - conditions:
            - condition: numeric_state
              entity_id: sensor.solar_power_production
              above: 2000
            - condition: numeric_state
              entity_id: sensor.current_power_cost
              below: 0.10
          sequence:
            - service: aicleaner.switch_provider
              data:
                provider: "anthropic"

# Example 6: Voice Command Integration with AI Text Generation
automation voice_ai_assistant:
  alias: "Voice AI Assistant"
  description: "Use voice commands to trigger AI text generation"
  trigger:
    - platform: event
      event_type: alexa_intent
      event_data:
        intent_name: AskAIIntent
  action:
    - service: aicleaner.generate_text
      data:
        prompt: >
          You are a helpful home assistant. The user asked: "{{ trigger.event.data.slots.Question.value }}"
          
          Provide a helpful, concise response suitable for voice output. Keep it under 100 words and speak naturally.
          
          Context about the home:
          - Current temperature: {{ states('sensor.indoor_temperature') }}Â°
          - Weather outside: {{ states('weather.home') }}
          - Time: {{ now().strftime('%I:%M %p') }}
          - Security status: {{ states('alarm_control_panel.home') }}
        temperature: 0.5
        max_tokens: 200
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_generation_complete
      timeout: "00:01:00"
    - service: notify.alexa_media
      data:
        target: "{{ trigger.event.data.device_id }}"
        message: "{{ trigger.event.data.result.text }}"
        data:
          type: tts

# Example 7: Condition-Based Service Selection
script check_and_use_ai:
  alias: "Check AI Status and Use Service"
  description: "Safely check AI status before using services"
  sequence:
    # Check if core service is available
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
    
    # Check if we have available providers
    - condition: template
      value_template: "{{ states('sensor.aicleaner_providers') | int > 0 }}"
    
    # Use the service
    - service: aicleaner.generate_text
      data:
        prompt: "{{ prompt }}"
        provider: "{{ provider | default('') }}"
        temperature: "{{ temperature | default(0.7) }}"
    
    # Wait for result
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_generation_complete
      timeout: "00:01:00"
    
    # Return the result
    - stop: "{{ trigger.event.data.result.text if trigger.event else 'AI service timeout' }}"

# Example 8: Multiple Camera Security Patrol
automation security_patrol:
  alias: "AI Security Patrol"
  description: "Periodically analyze all security cameras with AI"
  trigger:
    - platform: time_pattern
      minutes: "/30"  # Every 30 minutes
  condition:
    - condition: state
      entity_id: input_boolean.security_patrol_enabled
      state: "on"
    - condition: state
      entity_id: sensor.aicleaner_status
      state: "ok"
  action:
    - repeat:
        count: "{{ ['camera.front_door', 'camera.back_yard', 'camera.garage', 'camera.living_room'] | length }}"
        sequence:
          - variables:
              camera: "{{ ['camera.front_door', 'camera.back_yard', 'camera.garage', 'camera.living_room'][repeat.index - 1] }}"
          - service: aicleaner.analyze_camera
            data:
              entity_id: "{{ camera }}"
              prompt: "Security patrol analysis: Look for any unusual activity, unauthorized persons, or security concerns. Report 'All clear' if nothing unusual is detected."
              provider: "gemini"
          - delay: "00:00:05"  # Brief delay between analyses
    
    # Wait for all analyses to complete
    - delay: "00:02:00"
    
    # Generate summary report
    - service: aicleaner.generate_text
      data:
        prompt: >
          Generate a security patrol summary report for {{ now().strftime('%Y-%m-%d %H:%M') }}.
          
          Recent camera analyses:
          - Last analysis result: {{ states('sensor.aicleaner_last_analysis') }}
          
          Create a brief security status report. If all cameras show "All clear", 
          provide a positive summary. If any concerns are noted, highlight them.
        temperature: 0.2
        max_tokens: 300
    
    - wait_for_trigger:
        - platform: event
          event_type: aicleaner_generation_complete
      timeout: "00:01:00"
    
    # Log the patrol report
    - service: logbook.log
      data:
        name: "AI Security Patrol"
        message: "{{ trigger.event.data.result.text }}"